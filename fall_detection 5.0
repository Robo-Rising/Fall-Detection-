#define BLYNK_TEMPLATE_ID "TMPL6DgTdIMCF"
#define BLYNK_TEMPLATE_NAME "IOT based fall detection"
#define BLYNK_AUTH_TOKEN "-jG9V9Yin3qo_qDCIcA8sO0eFsDX70NW"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <math.h>

Adafruit_MPU6050 mpu;

char ssid[] = "abcd";
char pass[] = "12345678";
BlynkTimer timer;

// Thresholds for fall detection
const float ACCEL_SPIKE_THRESHOLD = 2.5;  // 2.5g impact threshold
const float LOW_ACCEL_THRESHOLD = 0.5;    // 0.5g still threshold
const float TILT_THRESHOLD = 45.0;        // 45 degree tilt threshold
const int FALL_CONFIRM_WINDOW = 1000;     // 1s validation window
const int STILL_PHASE_MIN_TIME = 500;     // 500ms still phase

bool potentialFall = false;
unsigned long fallStartTime = 0;
unsigned long stillStartTime = 0;

void setup() {
  Serial.begin(921600);
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  while (!mpu.begin()) {
    Serial.println("MPU6050 not found!");
    delay(1000);
  }
  Serial.println("MPU6050 initialized!");
  
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  
  timer.setInterval(100L, checkFall);
}

void loop() {
  Blynk.run();
  timer.run();
}

void checkFall() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Convert acceleration to g units
  float ax = a.acceleration.x / 9.81;
  float ay = a.acceleration.y / 9.81;
  float az = a.acceleration.z / 9.81;

  float totalAccel = sqrt(ax*ax + ay*ay + az*az);

  // Detect impact phase (sudden acceleration spike)
  if (totalAccel > ACCEL_SPIKE_THRESHOLD && !potentialFall) {
    potentialFall = true;
    fallStartTime = millis();
    Serial.println("Impact detected! Monitoring...");
  }

  if (potentialFall) {
    // Check still phase (low acceleration)
    if (totalAccel < LOW_ACCEL_THRESHOLD) {
      if (stillStartTime == 0) stillStartTime = millis();

      // After still phase duration, check tilt
      if (millis() - stillStartTime > STILL_PHASE_MIN_TIME) {
        // Calculate tilt angles using raw accelerometer data
        float pitch = atan2(ay, sqrt(ax*ax + az*az)) * 180/PI;
        float roll = atan2(-ax, az) * 180/PI;

        Serial.print("Post-fall tilt - Pitch: ");
        Serial.print(pitch);
        Serial.print("°, Roll: ");
        Serial.print(roll);
        Serial.println("°");

        // Confirm fall if tilt exceeds threshold
        if (abs(pitch) > TILT_THRESHOLD || abs(roll) > TILT_THRESHOLD) {
          Serial.println("Fall confirmed!");
          Blynk.logEvent("fall_detected", "Fall Detected: Significant Tilt!");
          sendSensorData(a, g); // Send detailed data with alert
        }
        
        resetDetection();
        return;
      }
    } else {
      stillStartTime = 0;
    }

    // Cancel detection if window expires
    if (millis() - fallStartTime > FALL_CONFIRM_WINDOW) {
      Serial.println("Fall detection cancelled");
      resetDetection();
    }
  }

  // Send regular sensor data
  sendSensorData(a, g);
}

void resetDetection() {
  potentialFall = false;
  stillStartTime = 0;
  fallStartTime = 0;
}

void sendSensorData(sensors_event_t a, sensors_event_t g) {
  // Convert to g units for Blynk
  Blynk.virtualWrite(V0, a.acceleration.x / 9.81);
  Blynk.virtualWrite(V1, a.acceleration.y / 9.81);
  Blynk.virtualWrite(V2, a.acceleration.z / 9.81);
  
  // Convert gyro to degrees/s
  Blynk.virtualWrite(V3, g.gyro.x * 180/PI);
  Blynk.virtualWrite(V4, g.gyro.y * 180/PI);
  Blynk.virtualWrite(V5, g.gyro.z * 180/PI);
}
